@page "/Create"
@inject HttpClient httpClient

<PageTitle>Crear Nuevo Vehiculo</PageTitle>
<EditForm Model="vehiculo" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3><strong>Crear Nuevo Vehiculo</strong></h3>
            </div>
            <div class="card-body">
                <label>Vehiculo Id:</label>
                <div class="col-6">
                    <InputNumber @bind-Value="vehiculo.VehiculoId" class="id-input"></InputNumber>
                </div>
                <div class="row">
                    <div class="col-2">
                        <label>Fecha:</label>
                        <InputDate @bind-Value="vehiculo.Fecha" class="form-control input-group-sm"></InputDate>
                        <ValidationMessage For="@(() => vehiculo.Fecha)" />
                    </div>
                    <div class="row">
                        <div class="col-4">
                            <label>Descripci&oacute;n:</label>
                            <InputText @bind-Value="vehiculo.Descripcion" class="form-control input-group-sm" placeholder="Digite la descripción del vehículo"></InputText>
                            <ValidationMessage For="@(() => vehiculo.Descripcion)" />
                        </div>
                        <div class="col-2">
                            <label>Costo:</label>
                            <InputNumber @bind-Value="vehiculo.Costo" class="form-control input-group-sm"></InputNumber>
                            <ValidationMessage For="@(() => vehiculo.Costo)" />
                        </div>
                        <div class="col-2">
                            <label>Gastos:</label>
                            <InputNumber @bind-Value="vehiculo.Gastos" class="form-control input-group-sm" readonly></InputNumber>
                            <ValidationMessage For="@(() => vehiculo.Gastos)" />
                        </div>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-center">
                    <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Crear</button>
                    <div class="col d-flex justify-content-end"><a href="/Index" class="btn btn-dark"> Volver</a></div>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3><strong>Detalles Veh&iacute;culo</strong></h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-3">
                        <label>Accesorio:</label>
                        <InputSelect class="form-select" @bind-Value="Detalle.AccesorioId">
                            <option disabled selected>Seleccione una opción</option>
                            @foreach (var accesorio in listaAccesorios)
                            {
                                <option value="@accesorio.AccesorioId">@accesorio.Descripcion</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Detalle.AccesorioId)" />
                    </div>
                    <div class="col-2">
                        <label>Valor</label>
                        <InputNumber @bind-Value="Detalle.Valor" class="form-control"></InputNumber>
                        <ValidationMessage For="@(() => Detalle.Valor)" />
                    </div>
                    <div class="col-3">
                        <button type="button" @onclick="Agregar" class="btn btn-success">Agregar</button>
                    </div>
                </div>
            </div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Accesorio</th>
                        <th>Valor</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in listaDetalles)
                    {
                        <tr>
                            <td>@BuscarNombreAccesorio(detalle.AccesorioId)</td>
                            <td>@detalle.Valor</td>
                            <td><button type="button" class="btn btn-info" @onclick=@(() => Editar(detalle))>Editar</button></td>
                            <td><button type="button" class="btn btn-danger" @onclick=@(() => Remover(detalle))>Eliminar</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @Mensaje
    </div>
</EditForm>

@code {
    public Vehiculos vehiculo { get; set; } = new Vehiculos();
    public string Mensaje { get; set; } = string.Empty;
    public VehiculosDetalle Detalle { get; set; } = new VehiculosDetalle();
    public List<VehiculosDetalle> listaDetalles = new List<VehiculosDetalle>();
    public List<Accesorios> listaAccesorios = new List<Accesorios>();

    protected override async Task OnInitializedAsync()
    {
        listaAccesorios = (await httpClient.GetFromJsonAsync<List<Accesorios>>("api/Accesorios"))!;
    }

    public async Task Crear()
    {
        var vehiculoCreado = await httpClient.PostAsJsonAsync("api/Vehiculos", vehiculo);

        if (vehiculoCreado.IsSuccessStatusCode)
        {
            var vehiculoGuardado = await vehiculoCreado.Content.ReadFromJsonAsync<Vehiculos>();

            foreach (var detalle in listaDetalles)
            {
                VehiculosDetalle nuevoDetalle = new VehiculosDetalle();
                nuevoDetalle.VehiculoId = vehiculoGuardado!.VehiculoId;
                nuevoDetalle.AccesorioId = detalle.AccesorioId;
                nuevoDetalle.Valor = detalle.Valor;

                await httpClient.PostAsJsonAsync("api/VehiculosDetalles", nuevoDetalle);
            }

            Nuevo();
            Mensaje = "Se guardó correctamente el vehículo.";
        }
        else
        {
            Nuevo();
            Mensaje = "No se pudo guardar el vehículo.";
        }
    }

    public void Nuevo()
    {
        vehiculo = new Vehiculos();
        Mensaje = string.Empty;
        Detalle = new VehiculosDetalle();
        listaDetalles = new List<VehiculosDetalle>();
    }

    public void Agregar()
    {
        if (Detalle.Valor > 0)
        {
            listaDetalles.Add(Detalle);
            Detalle = new VehiculosDetalle();
            Mensaje = string.Empty;
        }
        else
            Mensaje = "No pueden haber campos vacíos.";
    }

    public void Remover(VehiculosDetalle detalle)
    {
        Detalle = detalle;
        listaDetalles.Remove(detalle);
        Detalle = new VehiculosDetalle();
    }

    public void Editar(VehiculosDetalle detalle)
    {
        Detalle = detalle;
    }

    public string BuscarNombreAccesorio(int id)
    {
        var buscado = listaAccesorios.FirstOrDefault(n => n.AccesorioId == id);
        return buscado!.Descripcion;
    }
}