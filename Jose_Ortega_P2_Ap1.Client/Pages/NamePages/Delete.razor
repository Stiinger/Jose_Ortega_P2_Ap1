@page "/Delete"
@page "/Delete/Id={vehiculoId:int}"

@inject HttpClient httpClient
@inject NavigationManager NavigationManager;

<PageTitle>Eliminar Veh&iacute;culo</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header">
			<h3><strong>Eliminar Veh&iacute;culo</strong></h3>
		</div>
		<div class="card-body">
			<h4><strong>¿Seguro quieres eliminar este veh&iacute;culo?</strong></h4>
			<div>
				<p class="mb-2"><strong>Veh&iacute;culo Id:</strong> @vehiculo.VehiculoId</p>
			</div>
			<div>
				<p class="mb-2"><strong>Fecha:</strong> @vehiculo.Fecha.ToShortDateString()</p>
			</div>
			<div>
				<p class="mb-2"><strong>Descripci&oacute;n:</strong> @vehiculo.Descripcion</p>
			</div>
			<div>
				<p class="mb-2"><strong>Costo:</strong> @vehiculo.Costo.ToString("N2")</p>
			</div>
			<div>
				<p class="mb-2"><strong>Gastos:</strong> @vehiculo.Gastos.ToString("N2")</p>
			</div>
			<button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="bi bi-trash3"></i> Eliminar</button>
			<button type="button" class="btn btn-dark" @onclick="VolverAtras"><i class="bi bi-x-octagon"></i> Cancelar</button>
		</div>
	</div>
</div>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header">
			<h3><strong>Detalles Veh&iacute;culo</strong></h3>
		</div>
		<div class="card-body">
			<table class="table table-bordered">
				<thead>
					<tr>
						<th>Accesorio</th>
						<th>Valor</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var detalle in listaDetalles)
					{
						<tr>
							<td>@BuscarNombreAccesorio(detalle.AccesorioId)</td>
							<td>@detalle.Valor</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div class="card-footer">
			<div class="col d-flex justify-content-end"><a href="/Index" class="btn btn-dark"> Volver</a></div>
		</div>
	</div>
	@Mensaje
</div>

@code {
	[Parameter]
	public int vehiculoId { get; set; }
	public Vehiculos vehiculo { get; set; } = new Vehiculos();
	public string Mensaje { get; set; } = string.Empty;
	public List<Accesorios> listaAccesorios = new List<Accesorios>();
	public List<VehiculosDetalle> listaDetalles = new List<VehiculosDetalle>();


	protected override async Task OnInitializedAsync()
	{
		vehiculo.VehiculoId = vehiculoId;
		listaAccesorios = (await httpClient.GetFromJsonAsync<List<Accesorios>>("api/Accesorios"))!;

		listaDetalles = (await httpClient
						.GetFromJsonAsync<List<VehiculosDetalle>>("api/VehiculosDetalles"))!
						.Where(v => v.VehiculoId == vehiculo.VehiculoId)
						.ToList();
		await Buscar();
	}

	public async Task Buscar()
	{
		var vehiculoBuscado = await httpClient.GetFromJsonAsync<Vehiculos>("api/Vehiculos/" + vehiculoId);
		if (vehiculoBuscado != null)
		{
			vehiculo = vehiculoBuscado;
		}
		else
			Mensaje = "No se ha encontrado el vehiculo.";
	}

	public async Task Eliminar()
	{
		var eliminado = await httpClient.DeleteAsync($"api/Vehiculos/{vehiculo.VehiculoId}");
		if (eliminado.IsSuccessStatusCode)
			VolverAtras();
		else
			Mensaje = "No se podido eliminar el vehiculo.";
	}

	void VolverAtras()
	{
		NavigationManager.NavigateTo("/Index");
	}

	public string BuscarNombreAccesorio(int id)
	{
		var buscado = listaAccesorios.FirstOrDefault(n => n.AccesorioId == id);
		return buscado!.Descripcion;
	}
}